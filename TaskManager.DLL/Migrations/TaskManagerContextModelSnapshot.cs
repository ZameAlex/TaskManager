// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TaskManager.DLL.DBContext;

namespace TaskManager.DLL.Migrations
{
    [DbContext(typeof(TaskManagerContext))]
    partial class TaskManagerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.2-rtm-30932")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TaskManager.DLL.Models.CalendarDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ConcreteTaskId");

                    b.Property<DateTime>("Date");

                    b.Property<TimeSpan>("FreeTime");

                    b.HasKey("Id");

                    b.HasIndex("ConcreteTaskId");

                    b.ToTable("CalendarDays");
                });

            modelBuilder.Entity("TaskManager.DLL.Models.Stage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ConcreteTaskId");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("ConcreteTaskId");

                    b.ToTable("Stages");
                });

            modelBuilder.Entity("TaskManager.DLL.Models.Task", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CalendarDayId");

                    b.Property<string>("Description");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<int?>("GlobalTaskId");

                    b.Property<string>("Name");

                    b.Property<int>("Status");

                    b.Property<int?>("ThemeId");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CalendarDayId");

                    b.HasIndex("GlobalTaskId");

                    b.HasIndex("ThemeId");

                    b.HasIndex("UserId");

                    b.ToTable("Task");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Task");
                });

            modelBuilder.Entity("TaskManager.DLL.Models.Theme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Themes");
                });

            modelBuilder.Entity("TaskManager.DLL.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Login");

                    b.Property<string>("Nickname");

                    b.Property<string>("Password");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TaskManager.DLL.Models.ConcreteTask", b =>
                {
                    b.HasBaseType("TaskManager.DLL.Models.Task");

                    b.Property<TimeSpan>("Estimation");

                    b.Property<int>("Frequency");

                    b.Property<bool>("Requirement");

                    b.Property<DateTime>("StartTime");

                    b.ToTable("ConcreteTask");

                    b.HasDiscriminator().HasValue("ConcreteTask");
                });

            modelBuilder.Entity("TaskManager.DLL.Models.GlobalTask", b =>
                {
                    b.HasBaseType("TaskManager.DLL.Models.Task");

                    b.Property<DateTime>("EndDate");

                    b.ToTable("GlobalTask");

                    b.HasDiscriminator().HasValue("GlobalTask");
                });

            modelBuilder.Entity("TaskManager.DLL.Models.CalendarDay", b =>
                {
                    b.HasOne("TaskManager.DLL.Models.ConcreteTask")
                        .WithMany("Days")
                        .HasForeignKey("ConcreteTaskId");
                });

            modelBuilder.Entity("TaskManager.DLL.Models.Stage", b =>
                {
                    b.HasOne("TaskManager.DLL.Models.ConcreteTask")
                        .WithMany("Stages")
                        .HasForeignKey("ConcreteTaskId");
                });

            modelBuilder.Entity("TaskManager.DLL.Models.Task", b =>
                {
                    b.HasOne("TaskManager.DLL.Models.CalendarDay")
                        .WithMany("Tasks")
                        .HasForeignKey("CalendarDayId");

                    b.HasOne("TaskManager.DLL.Models.GlobalTask")
                        .WithMany("Tasks")
                        .HasForeignKey("GlobalTaskId");

                    b.HasOne("TaskManager.DLL.Models.Theme")
                        .WithMany("Tasks")
                        .HasForeignKey("ThemeId");

                    b.HasOne("TaskManager.DLL.Models.User")
                        .WithMany("Tasks")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("TaskManager.DLL.Models.Theme", b =>
                {
                    b.HasOne("TaskManager.DLL.Models.User")
                        .WithMany("Themes")
                        .HasForeignKey("UserId");
                });
#pragma warning restore 612, 618
        }
    }
}
