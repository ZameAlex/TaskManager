// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TaskManager.DLL.DBContext;

namespace TaskManager.DLL.Migrations
{
    [DbContext(typeof(TaskManagerContext))]
    [Migration("20180829202831_Init_Migrate")]
    partial class Init_Migrate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.2-rtm-30932")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TaskManager.DLL.Models.CalendarDay", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ConcreteTaskID");

                    b.Property<DateTime>("Date");

                    b.Property<TimeSpan>("FreeTime");

                    b.HasKey("ID");

                    b.HasIndex("ConcreteTaskID");

                    b.ToTable("Days");
                });

            modelBuilder.Entity("TaskManager.DLL.Models.Stage", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ConcreteTaskID");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.HasIndex("ConcreteTaskID");

                    b.ToTable("Stages");
                });

            modelBuilder.Entity("TaskManager.DLL.Models.Task", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CalendarDayID");

                    b.Property<string>("Description");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<int?>("GlobalTaskID");

                    b.Property<string>("Name");

                    b.Property<int>("Status");

                    b.Property<int?>("ThemeID");

                    b.Property<int?>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("CalendarDayID");

                    b.HasIndex("GlobalTaskID");

                    b.HasIndex("ThemeID");

                    b.HasIndex("UserID");

                    b.ToTable("Task");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Task");
                });

            modelBuilder.Entity("TaskManager.DLL.Models.Theme", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<int?>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("Themes");
                });

            modelBuilder.Entity("TaskManager.DLL.Models.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Login");

                    b.Property<string>("Password");

                    b.HasKey("ID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TaskManager.DLL.Models.ConcreteTask", b =>
                {
                    b.HasBaseType("TaskManager.DLL.Models.Task");

                    b.Property<TimeSpan>("Estimation");

                    b.Property<int>("Frequency");

                    b.Property<bool>("Requirement");

                    b.Property<DateTime>("StartTime");

                    b.ToTable("ConcreteTask");

                    b.HasDiscriminator().HasValue("ConcreteTask");
                });

            modelBuilder.Entity("TaskManager.DLL.Models.GlobalTask", b =>
                {
                    b.HasBaseType("TaskManager.DLL.Models.Task");

                    b.Property<DateTime>("EndDate");

                    b.ToTable("GlobalTask");

                    b.HasDiscriminator().HasValue("GlobalTask");
                });

            modelBuilder.Entity("TaskManager.DLL.Models.CalendarDay", b =>
                {
                    b.HasOne("TaskManager.DLL.Models.ConcreteTask")
                        .WithMany("Days")
                        .HasForeignKey("ConcreteTaskID");
                });

            modelBuilder.Entity("TaskManager.DLL.Models.Stage", b =>
                {
                    b.HasOne("TaskManager.DLL.Models.ConcreteTask")
                        .WithMany("Stages")
                        .HasForeignKey("ConcreteTaskID");
                });

            modelBuilder.Entity("TaskManager.DLL.Models.Task", b =>
                {
                    b.HasOne("TaskManager.DLL.Models.CalendarDay")
                        .WithMany("Tasks")
                        .HasForeignKey("CalendarDayID");

                    b.HasOne("TaskManager.DLL.Models.GlobalTask")
                        .WithMany("Tasks")
                        .HasForeignKey("GlobalTaskID");

                    b.HasOne("TaskManager.DLL.Models.Theme")
                        .WithMany("Tasks")
                        .HasForeignKey("ThemeID");

                    b.HasOne("TaskManager.DLL.Models.User")
                        .WithMany("Tasks")
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("TaskManager.DLL.Models.Theme", b =>
                {
                    b.HasOne("TaskManager.DLL.Models.User")
                        .WithMany("Themes")
                        .HasForeignKey("UserID");
                });
#pragma warning restore 612, 618
        }
    }
}
